/*WordCount.java(Driver Class)*/
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapred.*;
import org.apache.hadoop.util.*;

public class WordCount extends Configured implements Tool {
    public int run(String[] args) throws Exception {
        // creating a JobConf object and assigning a job name for identification purposes
        JobConf conf = new JobConf(getConf(), WordCount.class);
        conf.setJobName("WordCount");

        // Setting configuration object with the Data Type of output Key and Value
        conf.setOutputKeyClass(Text.class);
        conf.setOutputValueClass(IntWritable.class);

        // Providing the mapper and reducer class names
        conf.setMapperClass(WordCountMapper.class);
        conf.setReducerClass(WordCountReducer.class);

        // We will give 2 arguments at the run time, one for the input path and the other for the output path
        Path inp = new Path(args[0]);
        Path out = new Path(args[1]);

        // the HDFS input and output directory to be fetched from the command line
        FileInputFormat.addInputPath(conf, inp);
        FileOutputFormat.setOutputPath(conf, out);
        JobClient.runJob(conf);

        return 0;
    }

    public static void main(String[] args) throws Exception {
        // this main function will call the run method defined above.
        int res = ToolRunner.run(new Configuration(), new WordCount(), args);
        System.exit(res);
    }
}



/*WordCountMapper.java(Mapper Class)*/
import java.io.IOException;
import java.util.StringTokenizer;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapred.*;

public class WordCountMapper extends MapReduceBase implements Mapper<LongWritable, Text, Text, IntWritable> {

    // Hadoop supported data types
    private final static IntWritable one = new IntWritable(1);
    private Text word = new Text();

    // Map method that performs the tokenizer job and framing the initial key-value pairs
    // After all lines are converted into key-value pairs, the reducer is called.
    public void map(LongWritable key, Text value, OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {
        // Taking one line at a time from the input file and tokenizing the same
        String line = value.toString();
        StringTokenizer tokenizer = new StringTokenizer(line);

        // Iterating through all the words available in that line and forming the key-value pair
        while (tokenizer.hasMoreTokens()) {
            word.set(tokenizer.nextToken());
            // Sending to the output collector, which in turn passes the same to the reducer
            output.collect(word, one);
        }
    }
}



/*WordCountReducer.java(Reducer Class)*/
import java.io.IOException;
import java.util.Iterator;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapred.*;

public class WordCountReducer extends MapReduceBase implements Reducer<Text, IntWritable, Text, IntWritable> {

    // Reduce method accepts the Key-Value pairs from mappers, does the aggregation based on keys 
    // and produces the final output
    public void reduce(Text key, Iterator<IntWritable> values, OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {
        int sum = 0;
        
        // Iterates through all the values available with a key and adds them together, giving the final result as the key and the sum of its values
        while (values.hasNext()) {
            sum += values.next().get();
        }
        
        output.collect(key, new IntWritable(sum));
    }
}
